# mapper.py
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, Float, Boolean
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import NoSuchTableError
import re

class Mapper:
    def __init__(self, db_url: str):
        """
        Inicializuje Mapper s připojením k databázi.

        :param db_url: URL pro připojení k databázi, např. 'mysql+pymysql://user:password@localhost/testdb'
        """
        self.engine = create_engine(db_url, echo=False)
        self.metadata = MetaData()
        self.metadata.bind = self.engine
        self.Session = sessionmaker(bind=self.engine)
        self.session = self.Session()

    def _map_type(self, type_str: str):
        """
        Mapuje stringový typ na SQLAlchemy typ.

        :param type_str: Typ jako string, např. 'int', 'varchar(100)', 'bit', 'float'
        :return: SQLAlchemy typ
        """
        type_str = type_str.lower()
        if type_str.startswith('varchar'):
            size = int(re.findall(r'\d+', type_str)[0])
            return String(size)
        elif type_str in ['int', 'integer']:
            return Integer
        elif type_str == 'float':
            return Float
        elif type_str == 'bit':
            return Boolean
        else:
            raise ValueError(f"Neznámý typ: {type_str}")

    def get_or_create_table(self, table_name: str, columns: dict):
        """
        Získá existující tabulku nebo ji vytvoří na základě poskytnutých sloupců.

        :param table_name: Název tabulky.
        :param columns: Slovník s definicí sloupců, např. {'id': 'int', 'name': 'varchar(100)'}
        :return: SQLAlchemy Table objekt
        """
        try:
            table = Table(table_name, self.metadata, autoload_with=self.engine)
            return table
        except NoSuchTableError:
            cols = []
            for col_name, col_type in columns.items():
                if col_name.lower() == 'id':
                    cols.append(Column(col_name, self._map_type(col_type), primary_key=True, autoincrement=True))
                else:
                    cols.append(Column(col_name, self._map_type(col_type)))
            table = Table(table_name, self.metadata, *cols)
            table.create(self.engine)
            self.metadata.reflect()
            return table

    def create(self, obj: TableRow):
        """
        Vloží nový záznam do tabulky.

        :param obj: Objekt typu TableRow s daty pro vložení.
        """
        table = self.get_or_create_table(obj.table_name, obj.data)
        ins = table.insert().values(**obj.data)
        self.session.execute(ins)
        self.session.commit()

    def read(self, table_name: str, filters: dict = None):
        """
        Načte záznamy z tabulky na základě filtrů.

        :param table_name: Název tabulky.
        :param filters: Slovník s filtry, např. {'name': 'John'}
        :return: Seznam výsledků.
        """
        table = self.get_or_create_table(table_name, {})
        query = self.session.query(table)
        if filters:
            for key, value in filters.items():
                query = query.filter(table.c[key] == value)
        return query.all()

    def update(self, table_name: str, filters: dict, data: dict):
        """
        Aktualizuje záznamy v tabulce na základě filtrů.

        :param table_name: Název tabulky.
        :param filters: Slovník s filtry pro výběr záznamů k aktualizaci.
        :param data: Slovník s daty k aktualizaci.
        """
        table = self.get_or_create_table(table_name, {})
        upd = table.update()
        if filters:
            for key, value in filters.items():
                upd = upd.where(table.c[key] == value)
        upd = upd.values(**data)
        self.session.execute(upd)
        self.session.commit()

    def delete(self, table_name: str, filters: dict):
        """
        Smaže záznamy z tabulky na základě filtrů.

        :param table_name: Název tabulky.
        :param filters: Slovník s filtry pro výběr záznamů k mazání.
        """
        table = self.get_or_create_table(table_name, {})
        del_stmt = table.delete()
        if filters:
            for key, value in filters.items():
                del_stmt = del_stmt.where(table.c[key] == value)
        self.session.execute(del_stmt)
        self.session.commit()

    def close(self):
        """
        Uzavře session.
        """
        self.session.close()
